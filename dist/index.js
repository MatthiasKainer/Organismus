const e={};var o;!function(e){e[e.SILENT=0]="SILENT",e[e.ERROR=1]="ERROR",e[e.INFO=80]="INFO",e[e.DEBUG=90]="DEBUG",e[e.TRACE=100]="TRACE"}(o||(o={}));let n=o.SILENT;const r=e=>n=e;let t=[];const s=(e,r,...s)=>{t.forEach((n=>n(o.ERROR,e,r,...s))),n>=o.ERROR&&console.error(r,e,...s)},a=(e,r,...s)=>{if(t.forEach((n=>n(o.INFO,e,r,...s))),n>=o.INFO){(n===o.TRACE?console.trace:console.log)(r,e,...s)}},c=(e,r,...s)=>{if(t.forEach((n=>n(o.DEBUG,e,r,...s))),n>=o.DEBUG){(n===o.TRACE?console.trace:console.log)(r,e,...s)}},i={queue:{},list:{}};function l(e){return e.reduce(((e,o)=>`${e};${o.name};`),"")}const m=new class{constructor(){this.actionDictionary={}}on(e,o){if(Array.isArray(e)){const n=l(e);if(i.list[n])throw s("Hypothalamus.on",new Error("Cannot register the same list of hormones twice"),n),new Error("Cannot register the same list of hormones twice");a("[Hypothalamus.on] Adding new action when all in a list of hormones are released",n,e),i.list[n]={hormones:[...e],callback:o}}else a("Hypothalamus.on","Adding new action when a hormone is released",e.name),this.actionDictionary[e.name]=this.actionDictionary[e.name]||[],this.actionDictionary[e.name].push(o)}drop(e){Array.isArray(e)?(c("Hypothalamus.drop","Dropping a list of hormones",l(e),e),delete i.queue[l(e)],delete i.list[l(e)]):(c("Hypothalamus.drop","Dropping a hormone",e.name),this.actionDictionary[e.name]=[])}dropAll(){c("Hypothalamus.dropAll","Dropping all hormones"),this.actionDictionary={},i.queue={},i.list={}}collect(e,o,n){const r=`collect;;${e.name};${o.name};`;if(i.list[r])throw s("Hypothalamus.collect",new Error("Cannot register the same list of hormones twice"),r),new Error("Cannot register the same list of hormones twice");a("[Hypothalamus.collect] Adding new action when collected hormones are released",r,e,o),i.list[r]={hormones:[o],callback:n}}orchestrate(e,o){this.actionDictionary[e.name]&&this.actionDictionary[e.name].forEach((e=>e(o)));const n=Object.keys(i.queue).filter((o=>o.includes(`;${e.name};`))),r=Object.keys(i.list).filter((o=>o.indexOf(`;${e.name};`)>-1&&n.every((e=>e!==o))));r.forEach((e=>{i.queue[e]={hormones:[...i.list[e].hormones],values:{},callback:i.list[e].callback}}));const t=[...new Set([...n,...r])];for(let n=0;n<t.length;n++){const r=t[n];if(r.startsWith("collect;;")){const[n]=r.replace("collect;;","").split(";");e.name===n?i.queue[r].values[e.name]=[...i.queue[r].values[e.name]||[],o]:(i.queue[r].values[e.name]=o,i.queue[r].callback(i.queue[r].values),delete i.queue[r])}else i.queue[r].hormones=i.queue[r].hormones.filter((o=>o.name!==e.name)),i.queue[r].values[e.name]=o,i.queue[r].hormones.length<1&&(i.queue[r].callback(i.queue[r].values),delete i.queue[r])}}};function d(e,o={}){return u(e,Object.assign(Object.assign({},o),{readOnce:!0}))}function h(o,n={}){return f(e)(o,Object.assign(Object.assign({},n),{loadIfExists:!0}))}function u(o,n={}){return f(e)(o,n)}const f=e=>(o,n={})=>{if(e[o]&&!n.loadIfExists)throw s("hormone.defineHormone",new Error("Hormone already created"),o),new Error("Hormone already created");if(e[o]&&n.loadIfExists)return c("hormone.defineHormone","Hormone already created, reusing existing",o),{name:o};const{defaultValue:r,transformation:t,readOnce:a}=n;return e[o]={name:o,value:r,defaultValue:r,transformation:t,receptors:[],readOnce:null!=a&&a},{name:o}};async function p(o,n){return w(e)(o,n)}const w=e=>async(o,n)=>{if(!o)throw s("hormone.releaseHormone",new Error("Hormone cannot be undefined")),new Error("Hormone cannot be undefined");const{name:r}=o;if(!e[r])throw s("hormone.releaseHormone",new Error("Hormone does not exist"),r),new Error("Hormone does not exist");var t;t=n,e[r].value=(void 0===t||t instanceof Function)&&n?n(e[r].value):n,a("hormone.releaseHormone","Releasing passed hormone",r,e[r].value);const{receptors:i,transformation:l}=e[r];l&&l(e[r].value);const d=e[r].value;return m.orchestrate({name:r},d),await Promise.all(i.filter((e=>{const o=void 0===e.onlyIf||e.onlyIf(d);return c("hormone.releaseHormone",o?"Keeping receptor because condition matched or no condition":"Filtered receptor from the triggers because condition not matched",e),o})).map((e=>(null==e?void 0:e.onTriggered)?null==e?void 0:e.onTriggered(d):d))),e[r].readOnce&&(c("hormone.releaseHormone","Resetting hormone because it is readOnce",r),e[r].value=e[r].defaultValue),Object.assign({},e[r])};function H(o,{name:n},r,t){return g(e)(o,{name:n},r,t)}const g=e=>(r,{name:c},i,l)=>{const m=null!=l?l:i,d=l?i:void 0;if(!e[c])throw s("receptor.useReceptor",new Error("Hormone is not defined"),c),new Error(`Hormone "${c}" is not defined`);((e,o,n,r)=>{const t=(null==r?void 0:r.toString())||n;return!e[n].receptors.some((e=>e.parent===o&&e.key===t))})(e,r,c,d)?(a("receptor.useReceptor","Pushing new receptor to hormone",c,{parent:r}),e[c].receptors.push({key:(null==d?void 0:d.toString())||c,parent:r,onlyIf:d,onTriggered:m}),void 0!==e[c].value?m(e[c].value):void 0!==e[c].defaultValue&&m(e[c].defaultValue)):((e,r,...s)=>{t.forEach((n=>n(o.TRACE,e,r,...s))),n===o.TRACE&&console.trace(r,e,...s)})("receptor.useReceptor","Receptor not pushed because already subscribed",c,{parent:r})};function b(){const e={};return{defineHormone:f(e),releaseHormone:w(e),useReceptor:g(e)}}export{o as LOGLEVEL,b as Organismus,u as defineHormone,d as defineSingleHormone,h as getOrDefineHormone,m as hypothalamus,p as releaseHormone,r as setLoglevel,H as useReceptor};
