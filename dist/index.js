const e={};var o;!function(e){e[e.SILENT=0]="SILENT",e[e.ERROR=1]="ERROR",e[e.INFO=80]="INFO",e[e.DEBUG=90]="DEBUG",e[e.TRACE=100]="TRACE"}(o||(o={}));let r=o.SILENT;const n=e=>r=e;let t=[];const s=(e,n,...s)=>{t.forEach(r=>r(o.ERROR,e,n,...s)),r>=o.ERROR&&console.error(n,e,...s)},a=(e,n,...s)=>{if(t.forEach(r=>r(o.INFO,e,n,...s)),r>=o.INFO){(r===o.TRACE?console.trace:console.log)(n,e,...s)}},i=(e,n,...s)=>{if(t.forEach(r=>r(o.DEBUG,e,n,...s)),r>=o.DEBUG){(r===o.TRACE?console.trace:console.log)(n,e,...s)}},c={queue:{},list:{}};function l(e){return e.reduce((e,o)=>`${e};${o.name};`,"")}const m=new class{constructor(){this.actionDictionary={}}on(e,o){if(Array.isArray(e)){const r=l(e);if(c.list[r])throw s("Hypothalamus.on",new Error("Cannot register the same list of hormones twice"),r),new Error("Cannot register the same list of hormones twice");a("[Hypothalamus.on] Adding new action when all in a list of hormones are released",r,e),c.list[r]={hormones:[...e],callback:o}}else a("Hypothalamus.on","Adding new action when a hormone is released",e.name),this.actionDictionary[e.name]=this.actionDictionary[e.name]||[],this.actionDictionary[e.name].push(o)}drop(e){Array.isArray(e)?(i("Hypothalamus.drop","Dropping a list of hormones",l(e),e),delete c.queue[l(e)],delete c.list[l(e)]):(i("Hypothalamus.drop","Dropping a hormone",e.name),this.actionDictionary[e.name]=[])}dropAll(){i("Hypothalamus.dropAll","Dropping all hormones"),this.actionDictionary={},c.queue={},c.list={}}orchestrate(e,o){this.actionDictionary[e.name]&&this.actionDictionary[e.name].forEach(e=>e(o));const r=Object.keys(c.queue).filter(o=>o.indexOf(`;${e.name};`)>-1);let n=Object.keys(c.list).filter(o=>o.indexOf(`;${e.name};`)>-1&&r.every(e=>e!==o));n.forEach(e=>{c.queue[e]={hormones:[...c.list[e].hormones],values:{},callback:c.list[e].callback}});const t=[...new Set([...r,...n])];for(let r=0;r<t.length;r++){const n=t[r];c.queue[n].hormones=c.queue[n].hormones.filter(o=>o.name!==e.name),c.queue[n].values[e.name]=o,c.queue[n].hormones.length<1&&(c.queue[n].callback(c.queue[n].values),delete c.queue[n])}}};function d(o,r={}){if(e[o]&&!r.loadIfExists)throw s("hormone.defineHormone",new Error("Hormone already created"),o),new Error("Hormone already created");if(e[o]&&r.loadIfExists)return i("hormone.defineHormone","Hormone already created, reusing existing",o),{name:o};const{defaultValue:n,transformation:t,readOnce:a}=r;return e[o]={name:o,value:n,defaultValue:n,transformation:t,receptors:[],readOnce:null!=a&&a},{name:o}}async function h({name:o},r){if(!e[o])throw s("hormone.releaseHormone",new Error("Hormone does not exist"),o),new Error("Hormone does not exist");var n;n=r,e[o].value=void 0===n||n instanceof Function?void 0===r||r(e[o].value):r,a("hormone.releaseHormone","Releasing passed hormone",o,e[o].value);const{receptors:t,transformation:c}=e[o];return t.filter(r=>{const n=void 0===r.onlyIf||r.onlyIf(e[o].value);return i("hormone.releaseHormone",n?"Keeping receptor because condition matched or no condition":"Filtered receptor from the triggers because condition not matched",r),n}).forEach(({element:e})=>e.requestUpdate()),c&&c(e[o].value),m.orchestrate({name:o},e[o].value),await Promise.all(t.map(e=>e.element.updateComplete)),e[o].readOnce&&(i("hormone.releaseHormone","Resetting hormone because it is readOnce",o),e[o].value=e[o].defaultValue),Object.assign({},e[o])}function u(n,{name:i},c){if(!e[i])throw s("receptor.useReceptor",new Error("Hormone is not defined"),i),new Error(`Hormone "${i}" is not defined`);return((o,r,n)=>!e[r].receptors.some(e=>{var r;return e.element===o&&(null===(r=e.onlyIf)||void 0===r?void 0:r.toString())===(null==n?void 0:n.toString())}))(n,i,c)?(a("receptor.useReceptor","Pushing new receptor to hormone",i,{element:n}),e[i].receptors.push({element:n,onlyIf:c})):((e,n,...s)=>{t.forEach(r=>r(o.TRACE,e,n,...s)),r===o.TRACE&&console.trace(n,e,...s)})("receptor.useReceptor","Receptor not pushed because already subscribed",i,{element:n}),!c||c(e[i].value)?e[i].value:void 0}export{o as LOGLEVEL,d as defineHormone,m as hypothalamus,h as releaseHormone,n as setLoglevel,u as useReceptor};
